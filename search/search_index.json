{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"\ud83d\udc15 Unitree Go1 ROS2 Driver <p>A ROS2 package which can be used to control the legged robot Unitree Go1 Edu using ROS topics.</p> <p>This package acts has middleware between ROS2 and <code>unitree_legged_sdk</code>, which enables anyone to control the robot with velocity commands as well as receive back the robot state. Furthermore, additional features are also available such as standing up/down the robot and use head LEDs for some status information.</p> <p>Note</p> <p>Only supports <code>unitree_legged_sdk</code> High level commands</p> <p> </p>"},{"location":"#table-of-contents","title":"\ud83d\udcdc Table of Contents","text":"<ul> <li>\u2699\ufe0f Installation</li> <li>\ud83d\udce6 Installation From Source</li> <li>\ud83d\ude80 Usage</li> <li>\ud83e\udd16 ROS Related</li> <li>\ud83d\udce5 Subscribed Topics</li> <li>\ud83d\udce4 Published Topics</li> <li>\u2699\ufe0f ROS Parameters</li> <li>\ud83d\udee0\ufe0f Features</li> <li>\ud83d\udca1 Robot LED statuses</li> <li>\ud83e\udeab Low Battery Protection</li> <li>\ud83d\udea7 Obstacle Avoidance</li> <li>\ud83d\udd17 Related Packages</li> <li>\ud83d\udd11 License</li> <li>\ud83d\udc4f Contributions</li> <li>\ud83c\udf96\ufe0f Credits</li> <li>Maintainers</li> <li>Third-party Assets</li> </ul>"},{"location":"#installation","title":"\u2699\ufe0f Installation","text":"<p>This package is available in the ROS index for both Iron and Humble distributions.</p> <pre><code>sudo apt install ros-[distro]-unitree-ros\n</code></pre> <p>[!IMPORTANT] If you are using foxy as your ROS distribution, you need to build from source</p>"},{"location":"#installation-from-source","title":"\ud83d\udce6 Installation From Source","text":"<p>[!NOTE] Make sure to clone it recursively, as depends on the <code>unitree_legged_sdk</code>.</p> <pre><code>mkdir -p ~/unitree_ws/src\ncd ~/unitree_ws/src\ngit clone --recurse-submodules https://github.com/snt-arg/unitree_ros.git\n</code></pre> <p>Once you have cloned this repository, you will need to build it using Colcon.</p> <pre><code>cd ~/unitree_ws\nsource /opt/ros/[ros-distro]/setup.bash # or zsh if using the zsh shell!\ncolcon build --symlink-install\nsource install/setup.bash # or zsh if using the zsh shell!\n</code></pre> <p>After having built the workspace, you should now be able to use the driver to control your robot.</p>"},{"location":"#usage","title":"\ud83d\ude80 Usage","text":"<p>You can use this driver wired or with a Wi-Fi connection. By default, it is set to use the wired connection.</p> <p>To launch the driver, you can use the launch file available. For a wired connection use the following command:</p> <pre><code>ros2 launch unitree_ros unitree_driver_launch.py\n</code></pre> <p>For a Wi-Fi connection use the following command:</p> <pre><code>ros2 launch unitree_ros unitree_driver_launch.py wifi:=true\n</code></pre> <p>In case you prefer to modify more parameters, you can do so by passing the parameters file. The default parameters can be found in <code>config/params.yaml</code> or here.</p> <pre><code>ros2 launch unitree_ros unitree_driver_launch.py params_file:=\"path_to_your_params_file\" #wifi:=true/false\n</code></pre>"},{"location":"#ros-related","title":"\ud83e\udd16 ROS Related","text":""},{"location":"#subscribed-topics","title":"\ud83d\udce5 Subscribed Topics","text":"Topic name Message Type Description <code>cmd_vel</code> geometry_mgs/msg/Twist.msg This is used by the driver to receive velocity commands and send the appropriate commands to the robot. <code>/stand_up</code> std_msgs/msg/Empty.msg Triggers the robot to stand up <code>/stand_down</code> std_msgs/msg/Empty.msg Triggers the robot to stand down"},{"location":"#published-topics","title":"\ud83d\udce4 Published Topics","text":"Topic name Message Type Description <code>/odom</code> nav_msgs/msg/Odometry.msg The odometry state received from the robot is being published to this topic. <code>/imu</code> sensor_msgs/msg/IMU.msg The IMU state received from the robot is being published to this topic. <code>/bms_state</code> unitree_ros/msg/bms.msg The battery state received from the robot is being published to this topic. <code>/sensor_ranges</code> unitree_ros/msg/SensorRanges.msg The battery state received from the robot is being published to this topic."},{"location":"#ros-parameters","title":"\ud83d\udd27 ROS Parameters","text":"Parameter Name Default value Description <code>ns</code> - Name space that should be given to robot driver <code>robot_ip</code> 192.168.123.161 Robot IP that should be used to establish the UDP connection. For a Wi-Fi conntection use <code>192.168.12.1</code> <code>robot_target_port</code> 8082 The port that should be used to communicate with the robot. <code>cmd_vel_topic_name</code> /cmd_vel Topic name that should be used for subscribing to velocity commands <code>odom_topic_name</code> /odom Topic name that should be used for publishing the odometry state <code>imu_topic_name</code> /imu Topic name that should be used for publishing the IMU state <code>bms_state_topic_name</code> /bms_state Topic name that should be used for publishing the battery management state, such as battery level. <code>imu_frame_id</code> imu Frame id that should be used for the IMU frame <code>odom_frame_id</code> odom Frame id that should be used for the odometry frame <code>odom_child_frame_id</code> base_link Frame id of the body of the robot <code>use_obstacle_avoidance</code> false Enables (true) or disables (false) the robot obstacle avoidance. <code>low_batt_shutdown_threshold</code> 20 Battery threshold for when to stop the robot from moving, in case the battery is below"},{"location":"#features","title":"\ud83d\udee0\ufe0f Features","text":"<p>[!NOTE] In the next version, joint states will also be available.</p>"},{"location":"#robot-led-statuses","title":"\ud83d\udca1 Robot LED statuses","text":"<p>The robot has a few predetermined LED statuses, which are useful to give some information to anyone using the robot. The following statuses are available:</p> <ul> <li> <p>\ud83d\udfe2 Green Light: Ready status</p> <p></p> </li> <li> <p>\u26aa\ufe0f White Light: Idle status</p> <p></p> </li> <li> <p>\ud83d\udd35 Blue Light: Moving status</p> <p></p> </li> <li> <p>\ud83d\udfe1 Yellow Light: Low battery (&lt; 30 %)</p> <p></p> </li> </ul>"},{"location":"#low-battery-protection","title":"\ud83e\udeab Low Battery Protection","text":"<p>By specifying a low battery threshold using the parameters file (<code>low_batt_shutdown_threshold</code>), the driver will stop the robot from moving and will stand it down. By default, the low battery threshold value is set to 20%.</p>"},{"location":"#obstacle-avoidance","title":"\ud83d\udea7 Obstacle Avoidance","text":"<p>The robot has an obstacle avoidance mode. However, this mode is not enabled by default. Therefore, this driver allows you to enable it using the parameters file (<code>use_obstacle_avoidance</code>). By default, this is set to false</p>"},{"location":"#related-packages","title":"\ud83d\udd17 Related Packages","text":"<ul> <li>unitree_ros_to_real</li> </ul>"},{"location":"#license","title":"\ud83d\udd11 License","text":"<p>This project is licensed under the GPL-3.0 license - see the LICENSE for more details.</p>"},{"location":"#contributions","title":"\ud83d\udc4f Contributions","text":"<p>Contributions are welcome! If you have any suggestions, bug reports, or feature requests, please create a new issue or pull request.</p>"},{"location":"#credits","title":"\ud83c\udf96\ufe0f Credits","text":"<p>This package was developed for the Autonomous Robotics Group (ARG) from the University of Luxembourg.</p>"},{"location":"#maintainers","title":"Maintainers","text":"<ul> <li>Pedro Soares</li> </ul>"},{"location":"#third-party-assets","title":"Third-party Assets","text":"<ul> <li> <p>unitree_legged_sdk: This is the SDK provided by the Unitree robotics. It is being used to send/receive all the High level commands to/from the robot.</p> </li> <li> <p><code>faceLightSDK_nano</code>: This is the SDK that can be found on the internal computers of the Unitree Go1. It has been ported to this ROS package with the goal of being able to control the face LEDs, which are used to   give some robot statuses.</p> </li> </ul>"}]}